# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from proto.payment import payment_pb2 as proto_dot_payment_dot_payment__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in proto/payment/payment_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class PaymentServiceStub(object):
    """Payment service definition for internal microservice communication
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreatePayment = channel.unary_unary(
                '/payment.v1.PaymentService/CreatePayment',
                request_serializer=proto_dot_payment_dot_payment__pb2.CreatePaymentRequest.SerializeToString,
                response_deserializer=proto_dot_payment_dot_payment__pb2.CreatePaymentResponse.FromString,
                _registered_method=True)
        self.GetPayment = channel.unary_unary(
                '/payment.v1.PaymentService/GetPayment',
                request_serializer=proto_dot_payment_dot_payment__pb2.GetPaymentRequest.SerializeToString,
                response_deserializer=proto_dot_payment_dot_payment__pb2.GetPaymentResponse.FromString,
                _registered_method=True)
        self.GetUserPayments = channel.unary_unary(
                '/payment.v1.PaymentService/GetUserPayments',
                request_serializer=proto_dot_payment_dot_payment__pb2.GetUserPaymentsRequest.SerializeToString,
                response_deserializer=proto_dot_payment_dot_payment__pb2.GetUserPaymentsResponse.FromString,
                _registered_method=True)
        self.GetOrderPayments = channel.unary_unary(
                '/payment.v1.PaymentService/GetOrderPayments',
                request_serializer=proto_dot_payment_dot_payment__pb2.GetOrderPaymentsRequest.SerializeToString,
                response_deserializer=proto_dot_payment_dot_payment__pb2.GetOrderPaymentsResponse.FromString,
                _registered_method=True)
        self.ProcessPayment = channel.unary_unary(
                '/payment.v1.PaymentService/ProcessPayment',
                request_serializer=proto_dot_payment_dot_payment__pb2.ProcessPaymentRequest.SerializeToString,
                response_deserializer=proto_dot_payment_dot_payment__pb2.ProcessPaymentResponse.FromString,
                _registered_method=True)
        self.ConfirmPayment = channel.unary_unary(
                '/payment.v1.PaymentService/ConfirmPayment',
                request_serializer=proto_dot_payment_dot_payment__pb2.ConfirmPaymentRequest.SerializeToString,
                response_deserializer=proto_dot_payment_dot_payment__pb2.ConfirmPaymentResponse.FromString,
                _registered_method=True)
        self.CancelPayment = channel.unary_unary(
                '/payment.v1.PaymentService/CancelPayment',
                request_serializer=proto_dot_payment_dot_payment__pb2.CancelPaymentRequest.SerializeToString,
                response_deserializer=proto_dot_payment_dot_payment__pb2.CancelPaymentResponse.FromString,
                _registered_method=True)
        self.RefundPayment = channel.unary_unary(
                '/payment.v1.PaymentService/RefundPayment',
                request_serializer=proto_dot_payment_dot_payment__pb2.RefundPaymentRequest.SerializeToString,
                response_deserializer=proto_dot_payment_dot_payment__pb2.RefundPaymentResponse.FromString,
                _registered_method=True)
        self.UpdatePaymentStatus = channel.unary_unary(
                '/payment.v1.PaymentService/UpdatePaymentStatus',
                request_serializer=proto_dot_payment_dot_payment__pb2.UpdatePaymentStatusRequest.SerializeToString,
                response_deserializer=proto_dot_payment_dot_payment__pb2.UpdatePaymentStatusResponse.FromString,
                _registered_method=True)
        self.ValidatePaymentProvider = channel.unary_unary(
                '/payment.v1.PaymentService/ValidatePaymentProvider',
                request_serializer=proto_dot_payment_dot_payment__pb2.ValidatePaymentProviderRequest.SerializeToString,
                response_deserializer=proto_dot_payment_dot_payment__pb2.ValidatePaymentProviderResponse.FromString,
                _registered_method=True)


class PaymentServiceServicer(object):
    """Payment service definition for internal microservice communication
    """

    def CreatePayment(self, request, context):
        """Create a new payment
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPayment(self, request, context):
        """Get payment by ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserPayments(self, request, context):
        """Get payments by user ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrderPayments(self, request, context):
        """Get payments by order ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessPayment(self, request, context):
        """Process payment (initiate payment with provider)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfirmPayment(self, request, context):
        """Confirm payment (mark as completed)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelPayment(self, request, context):
        """Cancel payment
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RefundPayment(self, request, context):
        """Refund payment
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePaymentStatus(self, request, context):
        """Update payment status (webhook handling)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidatePaymentProvider(self, request, context):
        """Validate payment provider
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PaymentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreatePayment': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePayment,
                    request_deserializer=proto_dot_payment_dot_payment__pb2.CreatePaymentRequest.FromString,
                    response_serializer=proto_dot_payment_dot_payment__pb2.CreatePaymentResponse.SerializeToString,
            ),
            'GetPayment': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPayment,
                    request_deserializer=proto_dot_payment_dot_payment__pb2.GetPaymentRequest.FromString,
                    response_serializer=proto_dot_payment_dot_payment__pb2.GetPaymentResponse.SerializeToString,
            ),
            'GetUserPayments': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserPayments,
                    request_deserializer=proto_dot_payment_dot_payment__pb2.GetUserPaymentsRequest.FromString,
                    response_serializer=proto_dot_payment_dot_payment__pb2.GetUserPaymentsResponse.SerializeToString,
            ),
            'GetOrderPayments': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrderPayments,
                    request_deserializer=proto_dot_payment_dot_payment__pb2.GetOrderPaymentsRequest.FromString,
                    response_serializer=proto_dot_payment_dot_payment__pb2.GetOrderPaymentsResponse.SerializeToString,
            ),
            'ProcessPayment': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessPayment,
                    request_deserializer=proto_dot_payment_dot_payment__pb2.ProcessPaymentRequest.FromString,
                    response_serializer=proto_dot_payment_dot_payment__pb2.ProcessPaymentResponse.SerializeToString,
            ),
            'ConfirmPayment': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfirmPayment,
                    request_deserializer=proto_dot_payment_dot_payment__pb2.ConfirmPaymentRequest.FromString,
                    response_serializer=proto_dot_payment_dot_payment__pb2.ConfirmPaymentResponse.SerializeToString,
            ),
            'CancelPayment': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelPayment,
                    request_deserializer=proto_dot_payment_dot_payment__pb2.CancelPaymentRequest.FromString,
                    response_serializer=proto_dot_payment_dot_payment__pb2.CancelPaymentResponse.SerializeToString,
            ),
            'RefundPayment': grpc.unary_unary_rpc_method_handler(
                    servicer.RefundPayment,
                    request_deserializer=proto_dot_payment_dot_payment__pb2.RefundPaymentRequest.FromString,
                    response_serializer=proto_dot_payment_dot_payment__pb2.RefundPaymentResponse.SerializeToString,
            ),
            'UpdatePaymentStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePaymentStatus,
                    request_deserializer=proto_dot_payment_dot_payment__pb2.UpdatePaymentStatusRequest.FromString,
                    response_serializer=proto_dot_payment_dot_payment__pb2.UpdatePaymentStatusResponse.SerializeToString,
            ),
            'ValidatePaymentProvider': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidatePaymentProvider,
                    request_deserializer=proto_dot_payment_dot_payment__pb2.ValidatePaymentProviderRequest.FromString,
                    response_serializer=proto_dot_payment_dot_payment__pb2.ValidatePaymentProviderResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'payment.v1.PaymentService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('payment.v1.PaymentService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PaymentService(object):
    """Payment service definition for internal microservice communication
    """

    @staticmethod
    def CreatePayment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/payment.v1.PaymentService/CreatePayment',
            proto_dot_payment_dot_payment__pb2.CreatePaymentRequest.SerializeToString,
            proto_dot_payment_dot_payment__pb2.CreatePaymentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPayment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/payment.v1.PaymentService/GetPayment',
            proto_dot_payment_dot_payment__pb2.GetPaymentRequest.SerializeToString,
            proto_dot_payment_dot_payment__pb2.GetPaymentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserPayments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/payment.v1.PaymentService/GetUserPayments',
            proto_dot_payment_dot_payment__pb2.GetUserPaymentsRequest.SerializeToString,
            proto_dot_payment_dot_payment__pb2.GetUserPaymentsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOrderPayments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/payment.v1.PaymentService/GetOrderPayments',
            proto_dot_payment_dot_payment__pb2.GetOrderPaymentsRequest.SerializeToString,
            proto_dot_payment_dot_payment__pb2.GetOrderPaymentsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProcessPayment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/payment.v1.PaymentService/ProcessPayment',
            proto_dot_payment_dot_payment__pb2.ProcessPaymentRequest.SerializeToString,
            proto_dot_payment_dot_payment__pb2.ProcessPaymentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConfirmPayment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/payment.v1.PaymentService/ConfirmPayment',
            proto_dot_payment_dot_payment__pb2.ConfirmPaymentRequest.SerializeToString,
            proto_dot_payment_dot_payment__pb2.ConfirmPaymentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelPayment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/payment.v1.PaymentService/CancelPayment',
            proto_dot_payment_dot_payment__pb2.CancelPaymentRequest.SerializeToString,
            proto_dot_payment_dot_payment__pb2.CancelPaymentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RefundPayment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/payment.v1.PaymentService/RefundPayment',
            proto_dot_payment_dot_payment__pb2.RefundPaymentRequest.SerializeToString,
            proto_dot_payment_dot_payment__pb2.RefundPaymentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdatePaymentStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/payment.v1.PaymentService/UpdatePaymentStatus',
            proto_dot_payment_dot_payment__pb2.UpdatePaymentStatusRequest.SerializeToString,
            proto_dot_payment_dot_payment__pb2.UpdatePaymentStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ValidatePaymentProvider(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/payment.v1.PaymentService/ValidatePaymentProvider',
            proto_dot_payment_dot_payment__pb2.ValidatePaymentProviderRequest.SerializeToString,
            proto_dot_payment_dot_payment__pb2.ValidatePaymentProviderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
